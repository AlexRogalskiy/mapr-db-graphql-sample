schema {
  query: Query
  mutation: Mutation
}

type Query {

  # Albums queries
  album(id: String): Album
  albumBySlug(slug: String): Album
  albums(offset: Int, limit: Int): [Album]
  albumsRecommended(albumId: String, limit: Int): [Album]
  albumsByNameEntry(nameEntry: String, limit: Long): [Album]
  totalAlbums: Long

  # Artists queries
  artist(id: String): Artist
  artistBySlug(slug: String): Artist
  artists(offset: Int, limit: Int): [Artist]
  artistsByNameEntry(nameEntry: String, limit: Long): [Artist]
  artistsRecommended(artistId: String, limit: Int): [Artist]
  totalArtists: Long

  # User queries
  currentUser: User

  languages: [Language]

  # Search queries
  findByNameEntry(nameEntry: String, perPage: Int, page: Int): PaginatedSearchResult
  findAlbumsByNameEntry(nameEntry: String, perPage: Int, page: Int): PaginatedSearchResult
  findArtistsByNameEntry(nameEntry: String, perPage: Int, page: Int): PaginatedSearchResult

}

type Mutation {

  # Albums mutations
  createAlbum(album: AlbumInput!): Album
  updateAlbum(album: AlbumInput!): Album
  deleteAlbum(id: String!): Boolean
  deleteTrackInAlbum(albumId: String, trackId: String): Album
  saveAlbumTracks(albumId: String, tracks: [TrackInput]): Album
  updateAlbumTrack(albumId: String, track: TrackInput): Album
  addTrackToAlbum(albumId: String, track: TrackInput): Track
  changeAlbumRating(albumId: String!, rating: Float!): Float

  # Artists mutations
  createArtist(artist: ArtistInput!): Artist
  updateArtist(artist: ArtistInput!): Artist
  deleteArtist(id: String!): Boolean
  changeArtistRating(artistId: String!, rating: Float!): Float

}

type Album {
  id: String!
  artists: [Artist]
  tracks: [Track]
  name: String
  style: String
  barcode: String
  coverImageUrl: String
  imagesUrls: [String]
  status: String
  packaging: String
  language: String
  script: String
  mbid: String
  format: String
  country: String
  slug: String
  rating: Float
}

type Artist {
  id: String!
  albums: [Album]
  name: String
  gender: String
  rating: Float
  profileImageUrl: String
  imagesUrls: [String]
  disambiguationComment: String
  mbid: String
  area: String
  slug: String
  ipi: String
  isni: String
}

type Track {
  id: String!
  name: String
  length: Long
  position: Long
}

type User {
  username: String
  firstName: String
  lastName: String
  password: String
}

type Language {
  id: String
  name: String
}

type PaginatedSearchResult {
  pagination: Pagination
  results: [SearchResult]
}

type Pagination {
  perPage: Long
  items: Long
  page: Long
  pages: Long
}

type SearchResult {
  id: String
  name: String
  type: String
  imageUrl: String
  slug: String
}

input AlbumInput {
  _id: String
  name: String
  style: String
  barcode: String
  status: String
  packaging: String
  language: String
  script: String
  mbid: String
  format: String
  country: String
  coverImageUrl: String
  artists: [ArtistInput]
  tracks: [TrackInput]
}

input ArtistInput {
  _id: String
  name: String
  gender: String
  rating: Float
  profileImageUrl: String
  imagesUrls: [String]
  disambiguationComment: String
  albums: [AlbumInput]
  ipi: String
  isni: String
  mbid: String
  area: String
}

input TrackInput {
  _id: String
  name: String
  length: Long
  position: Long
}
